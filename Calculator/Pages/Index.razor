@page "/"
@using System.Text;

<PageTitle>Calculator</PageTitle>

<h1>Calculator</h1>

<div class=" calculator-container">
    <div class="calculator">
        <div class="display-container resizable-text" style="font-size: @CalculateFontSize()">@currentCalculation</div>
        <div class="buttons-container">
            <div class="row1-buttons button-row">
                <button @onclick="() => ClearDisplay(currentCalculation.ToString())" class="ac-button calcbutton">AC</button>
                <button @onclick="() => RemoveLastEntry()" class="c-button calcbutton">C</button>
                <button @onclick="() => Percentage()" class="percentage-button calcbutton">%</button>
                <button @onclick="() => UpdateOperator(divide)" class="division-button calcbutton">/</button>
            </div>
            <div class="row2-buttons button-row">
                <button @onclick="() => UpdateHeading(1.ToString())" class="number-button calcbutton">1</button>
                <button @onclick="() => UpdateHeading(2.ToString())" class="number-button calcbutton">2</button>
                <button @onclick="() => UpdateHeading(3.ToString())" class="number-button calcbutton">3</button>
                <button @onclick="() => UpdateOperator(multiply)" class="multiply-button calcbutton">x</button>
            </div>
            <div class="row3-buttons button-row">
                <button @onclick="() => UpdateHeading(4.ToString())" class="number-button calcbutton">4</button>
                <button @onclick="() => UpdateHeading(5.ToString())" class="number-button calcbutton">5</button>
                <button @onclick="() => UpdateHeading(6.ToString())" class="number-button calcbutton">6</button>
                <button @onclick="() => UpdateOperator(subtract)" class="subtract-button calcbutton">-</button>
            </div>
            <div class="row4-buttons button-row">
                <button @onclick="() => UpdateHeading(7.ToString())" class="number-button calcbutton">7</button>
                <button @onclick="() => UpdateHeading(8.ToString())" class="number-button calcbutton">8</button>
                <button @onclick="() => UpdateHeading(9.ToString())" class="number-button calcbutton">9</button>
                <button @onclick="() => UpdateOperator(add)" class="addition-button calcbutton">+</button>
            </div>
            <div class="row5-buttons button-row">
                <button @onclick="() => UpdateHeading(0.ToString())" class="number-button calcbutton">0</button>
                <button @onclick="() => UpdateHeading(decimalPoint.ToString())" class="row5-decimal-button calcbutton">.</button>
                <button @onclick="() => Calculate(currentCalculation.ToString())" class="row5-equals-button calcbutton">=</button>
            </div>
        </div>
    </div>
</div>



@code{
    private StringBuilder currentCalculation = new StringBuilder().Append("0");
    private string c = "c";
    private string multiply = "x";
    private string subtract = "-";
    private string divide = "/";
    private string add = "+";
    private string decimalPoint = ".";
    private int maxInputLength = 28;

    private void UpdateHeading(string character)
    {

        if (currentCalculation.ToString() == "0" || currentCalculation.ToString() == "Error")
        {
            currentCalculation.Clear();
            currentCalculation.Append(character);
        }
        else if (currentCalculation.Length < maxInputLength/2)
        {
            currentCalculation.Append(character);
        }
        else if(currentCalculation.Length >= maxInputLength)
        {
            if(character == add || character == subtract || character == divide || character == multiply)
            {
                currentCalculation.Append(character);
            }
        }
        else if (currentCalculation.Length >= maxInputLength/2 && 
                 currentCalculation.Length < maxInputLength &&
                 (currentCalculation.ToString().Contains(add) || currentCalculation.ToString().Contains(subtract) || currentCalculation.ToString().Contains(multiply) || currentCalculation.ToString().Contains(divide)))
        {
            currentCalculation.Append(character);
        }

    }

    private void PercentageOperator(string character)
    {

    }

    private void DisplayCurrentCalculation(string pCalculation)
    {
        currentCalculation = currentCalculation;
    }

    private void UpdateOperator(string character)
    {
        if (character == add || character == subtract || character == multiply || character == divide)
        {
            if (currentCalculation.ToString().Split(" ").Contains(add) || currentCalculation.ToString().Split(" ").Contains(subtract) || currentCalculation.ToString().Split(" ").Contains(multiply) || currentCalculation.ToString().Split(" ").Contains(divide))
            {
                Calculate(currentCalculation.ToString());
                currentCalculation.Append(" " + character + " ");

            }
            else
            {
                currentCalculation.Append(" " + character + " ");
            }
        }
        else
        {
            currentCalculation.Append(" " + character + " ");
        }

    }

    private void ClearDisplay(string character)
    {
        if(currentCalculation is not null || currentCalculation.Length > 0)
        {
            currentCalculation.Clear();
            currentCalculation.Append("0");

        }

    }

    private void RemoveLastEntry()
    {
        string lastDisplay = currentCalculation.ToString().Split(" ")[0];
        currentCalculation.Clear();
        currentCalculation.Append(lastDisplay);
    }

    private float Add(float pVal1, float pVal2)
    {
        return (pVal1 + pVal2);
    }

    private void Percentage()
    {
        if (currentCalculation.ToString().Split(" ").Length > 1)
        {
            try
            {
                float firstVal = float.Parse(currentCalculation.ToString().Split(" ")[0]);

                currentCalculation.Clear();
                currentCalculation.Append(firstVal / 100);
            }
            catch (Exception ex)
            {
                currentCalculation.Clear();
                currentCalculation.Append("Error");
            }
        }
        else
        {
            try
            {
                float currentVal = float.Parse(currentCalculation.ToString());
                currentCalculation.Clear();
                currentCalculation.Append(currentVal / 100);
                
            }
            catch (Exception ex)
            {
                currentCalculation.Clear();
                currentCalculation.Append("Error");
            }
        }

    }

    private float Subtract(float pVal1, float pVal2)
    {
        return (pVal1 - pVal2);
    }

    private float Multiply(float pVal1, float pVal2)
    {
        return (pVal1 * pVal2);
    }

    private float Divide(float pVal1, float pVal2)
    {
        return (pVal1 / pVal2);
    }

    private void Calculate(string pCalculation)
    {


        if(pCalculation is not null || pCalculation.ToString().Split(" ").Length > 1)
        {

            string[] calculationSeperated = pCalculation.Split(' ');
            // currentCalculation.Clear();

            if(calculationSeperated.Length > 2 && !calculationSeperated.Contains(""))
            {
                try
                {
                    float val1 = float.Parse(calculationSeperated[0]);
                    float val2 = float.Parse(calculationSeperated[2]);
                    float output = 0;

                    switch (calculationSeperated[1])
                    {
                        case "+":
                            output = Add(val1, val2);
                            ClearDisplay(pCalculation);
                            UpdateHeading(output.ToString());
                            break;

                        case "-":
                            output = Subtract(val1, val2);
                            ClearDisplay(pCalculation);
                            UpdateHeading(output.ToString());
                            break;

                        case "/":
                            output = Divide(val1, val2);
                            ClearDisplay(pCalculation);
                            UpdateHeading(output.ToString());
                            break;

                        case "x":
                            output = Multiply(val1, val2);
                            ClearDisplay(pCalculation);
                            UpdateHeading(output.ToString());
                            break;

                        default: break;

                    }
                }
                catch (Exception ex)
                {

                    currentCalculation.Clear();
                    currentCalculation.Append("Error");
                }
                
            }

            else
            {
                DisplayCurrentCalculation(currentCalculation.ToString());
            }

        }

        else
        {
            DisplayCurrentCalculation(currentCalculation.ToString());
        }

    }

    private string CalculateFontSize()
    {
        int maxLength = 17; 
        int textLength = currentCalculation.Length;
        double baseFontSize = 28; 
        double scaleFactor = 0.7; 


        double fontSize = textLength > maxLength ? baseFontSize * scaleFactor : baseFontSize;

        return $"{fontSize}px";
    }

}


